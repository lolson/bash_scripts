# Makefile for program source directory in GNU NLS utilities package.
# Copyright (C) 1995-1997, 2000, 2001 by Ulrich Drepper <drepper@gnu.ai.mit.edu>
#
# This file file be copied and used freely without restrictions.  It can
# be used in projects which are not available under the GNU General Public License
# but which still want to provide support for the GNU gettext functionality.
# Please note that the actual code is *not* freely available.

PACKAGE = mutt
VERSION = 1.5.24

# These two variables depend on the location of this directory.
subdir = po
top_builddir = ..

SHELL = /bin/sh


srcdir = .
top_srcdir = ..


prefix = /sw
exec_prefix = ${prefix}
datadir = ${datarootdir}
datarootdir = ${prefix}/share
localedir = $(datadir)/locale
gettextsrcdir = $(datadir)/gettext/po

INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
MKDIR_P = .././install-sh -c -d

CC = gcc
GMSGFMT = :
MSGFMT = :
XGETTEXT = :
MSGMERGE = msgmerge

DEFS = -DHAVE_CONFIG_H
CFLAGS = -Wall -pedantic -Wno-long-long -g -O2
CPPFLAGS =  -I/sw/include -I/usr/local/include// -I$(top_srcdir)/intl

INCLUDES = -I.. -I$(top_srcdir)/intl

COMPILE = $(CC) -c $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS) $(XCFLAGS)

POFILES =  de.po eu.po ru.po it.po es.po uk.po fr.po pl.po nl.po cs.po id.po sk.po ko.po el.po zh_TW.po zh_CN.po pt_BR.po eo.po gl.po sv.po da.po lt.po tr.po ja.po hu.po et.po ca.po bg.po ga.po
GMOFILES =  de.gmo eu.gmo ru.gmo it.gmo es.gmo uk.gmo fr.gmo pl.gmo nl.gmo cs.gmo id.gmo sk.gmo ko.gmo el.gmo zh_TW.gmo zh_CN.gmo pt_BR.gmo eo.gmo gl.gmo sv.gmo da.gmo lt.gmo tr.gmo ja.gmo hu.gmo et.gmo ca.gmo bg.gmo ga.gmo
DISTFILES = Makefile.in.in POTFILES.in $(PACKAGE).pot \
$(POFILES) $(GMOFILES)

# need two spaces before = as m4/gettext.m4 matches against
# 'POTFILES[space]=' to add files from POTFILES
BUILT_POTFILES  = $(top_builddir)/keymap_alldefs.h

POTFILES = \
     ../account.c \
     ../addrbook.c \
     ../alias.c \
     ../attach.c \
     ../browser.c \
     ../buffy.c \
     ../charset.c \
     ../color.c \
     ../commands.c \
     ../compose.c \
     ../crypt-gpgme.c \
     ../crypt.c \
     ../cryptglue.c \
     ../curs_lib.c \
     ../curs_main.c \
     ../edit.c \
     ../editmsg.c \
     ../flags.c \
     ../handler.c \
     ../headers.c \
     ../help.c \
     ../history.c \
     ../hook.c \
     ../imap/auth.c \
     ../imap/auth_anon.c \
     ../imap/auth_cram.c \
     ../imap/auth_gss.c \
     ../imap/auth_login.c \
     ../imap/auth_sasl.c \
     ../imap/browse.c \
     ../imap/command.c \
     ../imap/imap.c \
     ../imap/message.c \
     ../imap/util.c \
     ../init.c \
     ../keymap.c \
     ../lib.c \
     ../main.c \
     ../mbox.c \
     ../menu.c \
     ../mh.c \
     ../mutt_sasl.c \
     ../mutt_socket.c \
     ../mutt_ssl.c \
     ../mutt_ssl_gnutls.c \
     ../mutt_tunnel.c \
     ../muttlib.c \
     ../mx.c \
     ../pager.c \
     ../parse.c \
     ../pattern.c \
     ../pgp.c \
     ../pgpinvoke.c \
     ../pgpkey.c \
     ../pop.c \
     ../pop_auth.c \
     ../pop_lib.c \
     ../postpone.c \
     ../query.c \
     ../recvattach.c \
     ../recvcmd.c \
     ../remailer.c \
     ../rfc1524.c \
     ../score.c \
     ../send.c \
     ../sendlib.c \
     ../signal.c \
     ../smime.c \
     ../smtp.c \
     ../sort.c \
     ../status.c \
     ../thread.c

CATALOGS =  de.gmo eu.gmo ru.gmo it.gmo es.gmo uk.gmo fr.gmo pl.gmo nl.gmo cs.gmo id.gmo sk.gmo ko.gmo el.gmo zh_TW.gmo zh_CN.gmo pt_BR.gmo eo.gmo gl.gmo sv.gmo da.gmo lt.gmo tr.gmo ja.gmo hu.gmo et.gmo ca.gmo bg.gmo ga.gmo

.SUFFIXES:
.SUFFIXES: .c .o .po .pox .gmo .mo

.c.o:
	$(COMPILE) $<

.po.pox:
	$(MAKE) $(PACKAGE).pot
	$(MSGMERGE) $< $(PACKAGE).pot -o $*.pox

.po.mo:
	$(MSGFMT) -o $@ $<

.po.gmo:
	file=`echo $* | sed 's,.*/,,'`.gmo \
	  && rm -f $$file && $(GMSGFMT) --statistics -o $$file $<


all: all-yes

all-yes: $(CATALOGS)
all-no:

$(top_builddir)/keymap_alldefs.h:
	( cd $(top_builddir) && $(MAKE) keymap_alldefs.h )

# Note: Target 'all' must not depend on target '$(srcdir)/$(PACKAGE).pot',
# otherwise packages like GCC can not be built if only parts of the source
# have been downloaded.

$(PACKAGE).pot: $(POTFILES) $(BUILT_POTFILES) $(srcdir)/POTFILES.in
	rm -f $(PACKAGE).pot $(PACKAGE).po
	$(XGETTEXT) --default-domain=$(PACKAGE) --directory=$(top_srcdir) \
	  --add-comments --keyword=_ --keyword=N_ \
	  --files-from=$(srcdir)/POTFILES.in \
	&& \
	$(XGETTEXT) --default-domain=$(PACKAGE) \
	  --add-comments --keyword=_ --keyword=N_ \
	  --join $(BUILT_POTFILES) \
	&& test ! -f $(PACKAGE).po \
	   || ( rm -f $(PACKAGE).pot \
		&& mv $(PACKAGE).po $(PACKAGE).pot )


install: install-exec install-data
install-exec:
install-data: install-data-yes
	if test "$(PACKAGE)" = "gettext"; then \
	  $(MKDIR_P) $(DESTDIR)$(gettextsrcdir); \
	  $(INSTALL_DATA) $(srcdir)/Makefile.in.in \
			  $(DESTDIR)$(gettextsrcdir)/Makefile.in.in; \
	else \
	  : ; \
	fi
install-data-no: all
install-data-yes: all
	$(MKDIR_P) $(DESTDIR)$(datadir)
	@catalogs='$(CATALOGS)'; \
	for cat in $$catalogs; do \
	  cat=`basename $$cat`; \
	  lang=`echo $$cat | sed 's/\.gmo$$//'`; \
	  dir=$(localedir)/$$lang/LC_MESSAGES; \
	  $(MKDIR_P) $(DESTDIR)$$dir; \
	  if test -r $$cat; then \
	    $(INSTALL_DATA) $$cat $(DESTDIR)$$dir/$(PACKAGE).mo; \
	    echo "installing $$cat as $(DESTDIR)$$dir/$(PACKAGE).mo"; \
	  else \
	    $(INSTALL_DATA) $(srcdir)/$$cat $(DESTDIR)$$dir/$(PACKAGE).mo; \
	    echo "installing $(srcdir)/$$cat as" \
		 "$(DESTDIR)$$dir/$(PACKAGE).mo"; \
	  fi; \
	done

# Define this as empty until I found a useful application.
installcheck:

uninstall:
	catalogs='$(CATALOGS)'; \
	for cat in $$catalogs; do \
	  cat=`basename $$cat`; \
	  lang=`echo $$cat | sed 's/\.gmo$$//'`; \
	  rm -f $(DESTDIR)$(localedir)/$$lang/LC_MESSAGES/$(PACKAGE).mo; \
	done
	if test "$(PACKAGE)" = "gettext"; then \
	  rm -f $(DESTDIR)$(gettextsrcdir)/Makefile.in.in; \
	else \
	  : ; \
	fi

check: all

dvi info tags TAGS ID:

mostlyclean:
	rm -f core core.* *.pox $(PACKAGE).po *.new.po
	rm -fr *.o

clean: mostlyclean

distclean: clean
	rm -f Makefile Makefile.in POTFILES *.mo

maintainer-clean: distclean
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."
	rm -f $(GMOFILES)

distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)
dist distdir: $(DISTFILES)
	dists="$(DISTFILES)"; \
	for file in $$dists; do \
	  if test -f $$file; then dir=.; else dir=$(srcdir); fi; \
	  cp -p $$dir/$$file $(distdir); \
	done

update-po: Makefile
	$(MAKE) $(PACKAGE).pot
	if test "$(PACKAGE)" = "gettext"; then PATH=`pwd`/../src:$$PATH; fi; \
	cd $(srcdir); \
	catalogs='$(GMOFILES)'; \
	for cat in $$catalogs; do \
	  cat=`basename $$cat`; \
	  lang=`echo $$cat | sed 's/\.gmo$$//'`; \
	  echo "$$lang:"; \
	  if $(MSGMERGE) $$lang.po $(PACKAGE).pot -o $$lang.new.po; then \
	    mv -f $$lang.new.po $$lang.po; \
	  else \
	    echo "msgmerge for $$cat failed!"; \
	    rm -f $$lang.new.po; \
	  fi; \
	done
	$(MAKE) update-gmo

update-gmo: Makefile $(GMOFILES)
	@:

Makefile: Makefile.in.in $(top_builddir)/config.status POTFILES.in
	cd $(top_builddir) \
	  && CONFIG_FILES=$(subdir)/$@.in CONFIG_HEADERS= \
	       $(SHELL) ./config.status

# Tell versions [3.59,3.63) of GNU make not to export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
